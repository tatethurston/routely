import { generate, getRoutes } from "./codegen";
import { filepaths } from "./test-utils";

describe("getRoutes", () => {
  it("processes and orders route filepaths", () => {
    expect(getRoutes(filepaths)).toMatchInlineSnapshot(`
      Array [
        Object {
          "filepath": "routes/index.ts",
          "pathname": "/",
          "query": Object {},
        },
        Object {
          "filepath": "routes/404.ts",
          "pathname": "/404",
          "query": Object {},
        },
        Object {
          "filepath": "routes/_error/index.ts",
          "pathname": "/_error/",
          "query": Object {},
        },
        Object {
          "filepath": "routes/not-found.ts",
          "pathname": "/not-found",
          "query": Object {},
        },
        Object {
          "filepath": "routes/settings/index.ts",
          "pathname": "/settings/",
          "query": Object {},
        },
        Object {
          "filepath": "routes/_debug/health-check.ts",
          "pathname": "/_debug/health-check",
          "query": Object {},
        },
        Object {
          "filepath": "routes/api/bar.ts",
          "pathname": "/api/bar",
          "query": Object {},
        },
        Object {
          "filepath": "routes/settings/foo.ts",
          "pathname": "/settings/foo",
          "query": Object {},
        },
        Object {
          "filepath": "routes/settings/bars/[bar].ts",
          "pathname": "/settings/bars/[bar]",
          "query": Object {
            "bar": "dynamic",
          },
        },
        Object {
          "filepath": "routes/settings/bars/[bar]/baz.ts",
          "pathname": "/settings/bars/[bar]/baz",
          "query": Object {
            "bar": "dynamic",
          },
        },
        Object {
          "filepath": "routes/foo/[slug].ts",
          "pathname": "/foo/[slug]",
          "query": Object {
            "slug": "dynamic",
          },
        },
        Object {
          "filepath": "routes/api/[...segments].ts",
          "pathname": "/api/[...segments]",
          "query": Object {
            "segments": "catch-all",
          },
        },
        Object {
          "filepath": "routes/api/[[...segments]].ts",
          "pathname": "/api/[[...segments]]",
          "query": Object {
            "segments": "optional-catch-all",
          },
        },
        Object {
          "filepath": "routes/[foo].ts",
          "pathname": "/[foo]",
          "query": Object {
            "foo": "dynamic",
          },
        },
        Object {
          "filepath": "routes/[foo]/baz.ts",
          "pathname": "/[foo]/baz",
          "query": Object {
            "foo": "dynamic",
          },
        },
        Object {
          "filepath": "routes/[foo]/bar/[baz].ts",
          "pathname": "/[foo]/bar/[baz]",
          "query": Object {
            "baz": "dynamic",
            "foo": "dynamic",
          },
        },
        Object {
          "filepath": "routes/[foo]/bar/[baz]/foo/[bar].ts",
          "pathname": "/[foo]/bar/[baz]/foo/[bar]",
          "query": Object {
            "bar": "dynamic",
            "baz": "dynamic",
            "foo": "dynamic",
          },
        },
        Object {
          "filepath": "routes/[foo]/[bar]/[baz].ts",
          "pathname": "/[foo]/[bar]/[baz]",
          "query": Object {
            "bar": "dynamic",
            "baz": "dynamic",
            "foo": "dynamic",
          },
        },
      ]
    `);
  });
});

describe("generate", () => {
  it("writes routes", async () => {
    const routes = getRoutes(filepaths);
    expect(await generate(routes)).toMatchInlineSnapshot(`
      "// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.'
      // Run \`yarn routely\` to regenerate this file.

      import { Router } from \\"routely\\";

      type Routes = [
        {
          pathname: \\"/\\";
          query: never;
        },
        {
          pathname: \\"/404\\";
          query: never;
        },
        {
          pathname: \\"/_error/\\";
          query: never;
        },
        {
          pathname: \\"/not-found\\";
          query: never;
        },
        {
          pathname: \\"/settings/\\";
          query: never;
        },
        {
          pathname: \\"/_debug/health-check\\";
          query: never;
        },
        {
          pathname: \\"/api/bar\\";
          query: never;
        },
        {
          pathname: \\"/settings/foo\\";
          query: never;
        },
        {
          pathname: \\"/settings/bars/[bar]\\";
          query: { bar: string };
        },
        {
          pathname: \\"/settings/bars/[bar]/baz\\";
          query: { bar: string };
        },
        {
          pathname: \\"/foo/[slug]\\";
          query: { slug: string };
        },
        {
          pathname: \\"/api/[...segments]\\";
          query: { segments: string[] };
        },
        {
          pathname: \\"/api/[[...segments]]\\";
          query: { segments: string[] };
        },
        {
          pathname: \\"/[foo]\\";
          query: { foo: string };
        },
        {
          pathname: \\"/[foo]/baz\\";
          query: { foo: string };
        },
        {
          pathname: \\"/[foo]/bar/[baz]\\";
          query: { foo: string; baz: string };
        },
        {
          pathname: \\"/[foo]/bar/[baz]/foo/[bar]\\";
          query: { foo: string; baz: string; bar: string };
        },
        {
          pathname: \\"/[foo]/[bar]/[baz]\\";
          query: { foo: string; bar: string; baz: string };
        }
      ];

      export const router = new Router<Routes>([
        {
          pathname: \\"/\\",
          loader: () => import(\\"./routes/index.ts\\"),
        },
        {
          pathname: \\"/404\\",
          loader: () => import(\\"./routes/404.ts\\"),
        },
        {
          pathname: \\"/_error/\\",
          loader: () => import(\\"./routes/_error/index.ts\\"),
        },
        {
          pathname: \\"/not-found\\",
          loader: () => import(\\"./routes/not-found.ts\\"),
        },
        {
          pathname: \\"/settings/\\",
          loader: () => import(\\"./routes/settings/index.ts\\"),
        },
        {
          pathname: \\"/_debug/health-check\\",
          loader: () => import(\\"./routes/_debug/health-check.ts\\"),
        },
        {
          pathname: \\"/api/bar\\",
          loader: () => import(\\"./routes/api/bar.ts\\"),
        },
        {
          pathname: \\"/settings/foo\\",
          loader: () => import(\\"./routes/settings/foo.ts\\"),
        },
        {
          pathname: \\"/settings/bars/[bar]\\",
          loader: () => import(\\"./routes/settings/bars/[bar].ts\\"),
        },
        {
          pathname: \\"/settings/bars/[bar]/baz\\",
          loader: () => import(\\"./routes/settings/bars/[bar]/baz.ts\\"),
        },
        {
          pathname: \\"/foo/[slug]\\",
          loader: () => import(\\"./routes/foo/[slug].ts\\"),
        },
        {
          pathname: \\"/api/[...segments]\\",
          loader: () => import(\\"./routes/api/[...segments].ts\\"),
        },
        {
          pathname: \\"/api/[[...segments]]\\",
          loader: () => import(\\"./routes/api/[[...segments]].ts\\"),
        },
        {
          pathname: \\"/[foo]\\",
          loader: () => import(\\"./routes/[foo].ts\\"),
        },
        {
          pathname: \\"/[foo]/baz\\",
          loader: () => import(\\"./routes/[foo]/baz.ts\\"),
        },
        {
          pathname: \\"/[foo]/bar/[baz]\\",
          loader: () => import(\\"./routes/[foo]/bar/[baz].ts\\"),
        },
        {
          pathname: \\"/[foo]/bar/[baz]/foo/[bar]\\",
          loader: () => import(\\"./routes/[foo]/bar/[baz]/foo/[bar].ts\\"),
        },
        {
          pathname: \\"/[foo]/[bar]/[baz]\\",
          loader: () => import(\\"./routes/[foo]/[bar]/[baz].ts\\"),
        },
      ]);
      "
    `);
  });
});
