import { parse } from "path";
import {
  Route,
  getQueryType,
  getSegmentType,
  routeFromFilepath,
} from "./utils";

const segmentOrder = ["static", "dynamic", "catch-all", "optional-catch-all"];

const NON_ROUTABLE_PREFIX = "_";

export function getRoutes(files: string[]): Route[] {
  return files
    .filter((file) => !parse(file).name.startsWith(NON_ROUTABLE_PREFIX))
    .map((file) => {
      const pathname = routeFromFilepath(file);
      const query = getQueryType(pathname);

      return {
        filepath: file,
        pathname,
        query,
      };
    })
    .sort((a, b) => {
      const aSegments = a.pathname.split("/").filter(Boolean);
      const bSegments = b.pathname.split("/").filter(Boolean);
      for (let idx = 0; idx <= aSegments.length; idx++) {
        if (idx >= aSegments.length && idx >= bSegments.length) {
          return 0;
        } else if (idx >= aSegments.length) {
          return -1;
        } else if (idx >= bSegments.length) {
          return 1;
        }
        const a = segmentOrder.indexOf(getSegmentType(aSegments[idx]));
        const b = segmentOrder.indexOf(getSegmentType(bSegments[idx]));
        if (a < b) {
          return -1;
        }
        if (a > b) {
          return 1;
        }
      }
      return 0;
    });
}

function getQueryInterface(query: Route["query"]): string {
  let res = "";
  Object.entries(query).forEach(([key, value]) => {
    res += key;
    switch (value) {
      case "dynamic": {
        res += ": string";
        break;
      }
      case "catch-all":
      case "optional-catch-all": {
        res += ": string[]";
        break;
      }
      // istanbul ignore next: unreachable
      case "static": {
        break;
      }
      // istanbul ignore next: unreachable
      default: {
        const _exhaust: never = value;
        return _exhaust;
      }
    }
    res += "; ";
  });

  if (res) {
    return `{ ${res}}`;
  }
  return "never";
}
/*
 
  match<Ctx = Record<string, unknown>(path: keyof manifest, ctx: Ctx): manifest[keyof manifest] {
    for (let route of router.routes) {
      re = route.match(path); 
      if (re.match) {
        return manifest[route.pathname]({
          context: {},
          params: re.params ,
          url: Url
        });
      }
    }
  }

  export const router = new Router<([
    ,
    ,
    ,
  ]);
};
*/

function printIf(cond: boolean, str: string): string {
  return cond ? str : "";
}

export async function generate(routes: Route[]): Promise<string> {
  const isTS = routes.some((route) => route.filepath.includes(".ts"));

  let generated = `\
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.'
// Run \`yarn routely\` to regenerate this file.

import { Router } from "routely";

${printIf(
  isTS,
  `type Routes = [
${routes
  .map(
    (route) =>
      `  {
     pathname: "${route.pathname}";
     query: ${getQueryInterface(route.query)}
  }`
  )
  .join(",\n")}
]`
)}

export const router = new Router${printIf(isTS, `<Routes>`)}([
${routes
  .map(
    (route) =>
      `  {
    pathname: "${route.pathname}",
    loader: () => import("./${route.filepath}")
  }`
  )
  .join(",\n")}
]);
`;

  try {
    const prettier = await import("prettier");
    generated = prettier.format(generated, {
      parser: isTS ? "typescript" : "babel",
    });
  } catch (e) {
    console.warn(e);
  }

  return generated;
}
