import { Route } from "./utils";

function getQueryInterface(query: Route["query"]): string {
  let res = "";
  Object.entries(query).forEach(([key, value]) => {
    res += key;
    switch (value) {
      case "dynamic": {
        res += ": string";
        break;
      }
      case "catch-all":
      case "optional-catch-all": {
        res += ": string[]";
        break;
      }
      // istanbul ignore next: unreachable
      case "static": {
        break;
      }
      // istanbul ignore next: unreachable
      default: {
        const _exhaust: never = value;
        return _exhaust;
      }
    }
    res += "; ";
  });

  if (res) {
    return `{ ${res}}`;
  }
  return "never";
}

function printIf(cond: boolean, str: string): string {
  return cond ? str : "";
}

export async function generate(routes: Route[]): Promise<string> {
  const isTS = routes.some((route) => route.filepath.includes(".ts"));

  let generated = `\
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.'
// Run \`yarn routely\` to regenerate this file.

import { router } from "routely";

${printIf(
  isTS,
  `export type Route =
${routes
  .map(
    (route) =>
      `  | {
     pathname: "${route.pathname}";
     query: ${getQueryInterface(route.query)}
  }`
  )
  .join("\n")}
`
)}

const manifest = { ${routes
    .map(
      (route) => `  "${route.filepath}":  () => import("./${route.filepath}")`
    )
    .join(",\n")}
};

export const r = router${printIf(isTS, `<Route, typeof manifest>`)}(manifest);
`;

  try {
    const prettier = await import("prettier");
    generated = prettier.format(generated, {
      parser: isTS ? "typescript" : "babel",
    });
  } catch (e) {
    // istanbul ignore next
    console.warn(e);
  }

  return generated;
}
